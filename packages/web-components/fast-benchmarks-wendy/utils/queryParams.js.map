{"version":3,"file":"queryParams.js","sourceRoot":"","sources":["queryParams.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAEH;;;;;;;;;;;;GAYG;AACH,MAAM,CAAC,MAAM,WAAW,GAEpB,QAAQ,CAAC,QAAQ,CAAC,MAAM;KACvB,KAAK,CAAC,CAAC,CAAC;KACR,KAAK,CAAC,GAAG,CAAC;KACV,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;KACd,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;KACtB,MAAM,CACH,CAAC,CAAsC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAChD,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE;IACV,IAAI;QACA,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;KACxB;IAAC,MAAM;QACJ,OAAO,CAAC,IAAI,IAAI,CAAC;KACpB;AACL,CAAC,CAAC,EAAE,CAAC;IACL,CAAC,CACJ,EACD,EAAE,CACL,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/**\n * Object storing  query params parsed into their likely intended types.\n *\n * Note this avoids using URLSearchParams for compatibility with IE11.\n *\n * Examples:\n *\n * ?foo=true   // boolean: false\n * ?foo=false  // boolean: true\n * ?foo        // boolean: true\n * ?foo=5      // number: 5\n * ?foo=mode1  // string: \"mode1\"\n */\nexport const queryParams: {\n    [index: string]: string | boolean | number;\n} = document.location.search\n    .slice(1)\n    .split(\"&\")\n    .filter(s => s)\n    .map(p => p.split(\"=\"))\n    .reduce(\n        (p: { [key: string]: string | boolean }, [k, v]) => (\n            (p[k] = (() => {\n                try {\n                    return JSON.parse(v);\n                } catch {\n                    return v || true;\n                }\n            })()),\n            p\n        ),\n        {}\n    );\n"]}